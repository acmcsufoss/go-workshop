# Introduction to Go
goworkshop.libdb.so
OldURL: goworkshop.libdb.so

Diamond
ACM at CSUF

// - What is Go, made by who
// - What is Go commonly used for
// - Some cool features of Go, 1 demo slide per feature
//   - Go can do basic stuff: JSON REST API (http.ServeMux)
//   - JSON serialization w/ structs using struct tags built-in
//   - GoDoc: awesome consistent documentation for ALL packages
// - How to try/install Go, 2 ways
//   - Go Playground (good for following along)
//   - Go installation (recommend WSL2 w/ PATH installation)
//     - Setting up Go environment (vscode + gopls + staticcheck)
//     - Go tool usage (go build/run, go test)
// - Quick Go language demo
//   - Small syntax stuff
//   - Go data types: similar to C++ but much simpler
//     - Capitalization for exports, strict, structs w/ tags, etc.
//     - Goroutines: extremely easy multithreading, HTTP is multithreaded by
//     - default (unlike JS), basic concurrency example
//   - If we have time:
//     - Testing
//     - Profiling (pprof), awesome feature to debug slow code
// - Go Tour, easy self-learn

## A Taste of Go

.play -edit cmd/hello/main.go

Look at how fast it compiles!

.image images/gopher-running.jpg

## What is a Go?

Go (at [go.dev](https://go.dev)) is a programming language designed by Robert
Griesemer, Rob Pike and Ken Thompson at Google.

The big names:

- **Robert Griesemer** worked on the V8 JavaScript engine which powers
  Chrome and Node.JS
- **Ken Thompson** implemented the first Unix and helped create the C
  programming language
- **Rob Pike** was part of the Unix team and created UTF-8 with Ken Thompson.

## What can Go do?

(Almost) anything! Go is a **general-purpose** programming language.

Go is commonly used for:

- Backend/web development (REST APIs, microservices, etc.)
- DevOps (CI/CD, automation, tooling, etc.)
- Networking (TCP/UDP, etc.)

Go cannot:

- Write an operating system (it needs kernel APIs)
- Help you write the shortest code (it's meant to encourage good
  practices and readability)
- Evaluate Go code (it's compiled, but there are 3rd-party Go interpreters)

## Trying Go

```go
if tryInBrowser {
	// You can run code in your browser! This is good for following along!
	open("https://go.dev/play")
} else {
	// You can manually install Go instead.
	// We'll go over this later during the workshop.
	open("https://go.dev/dl")
}
```

## Here are some cool features of Go:

## Go automatically imports packages for you!

<div align="center" style="height: 85%">
	<video src="images/goimports-demo.webm" loop autoplay></video>
</div>

## Go has documentation for ALL open-source packages

Simply push it to a public repository (e.g. on GitHub) and it will be
automatically generated.

.image images/chi-docs.jpg

## Go has no exceptions

Error checking is done by returning a value of type `error`:

.play cmd/errnil/main.go /func(.|\n)*/

It's very explicit what can and cannot error out:

	                          vvvvv
	func Atoi(s string) (int, error)

## Go can serve JSON REST APIs

We can do this with just the built-in standard library!

.play cmd/rest/main.go /func main(.|\n)*/

// ## It doesn't trip up on bad JSON!
// 
// .play cmd/rest2/main.go /func main(.|\n)*/
// 
// ## ...unlike JavaScript
// 
// .play cmd/rest2/main.ts /^serve(.|\n)*/

## X in Y minutes, Y=Go

## Go is statically typed

	var x int = 5
	var y = 5 // type is inferred to be int
	fmt.Println(x, y) // 5 5
	
	z := 5 // shorthand "walrus" operator
	fmt.Println(z) // 5
	
	z = "hello" // error! z is an int
	
	// a function must have types, like C++
	// we can write (x, y int) instead of (x int, y int)
	// we can only define functions OUTSIDE of a function!
	func add(x, y int) int { return x + y }
	add(5, 6) // 11
	
	// addx is like add, but it's a first-class function
	// we can define this inside any function
	addx := func(x, y int) int { return x + y }
	addx(5, 6) // 11

## Go has all the basic stuff

	x := []int{1, 2, 3} // slices (aka lists)
	x = append(x, 4)    // add 4 to the end

	if x[0] == 1 { // if statements
		fmt.Println("x[0] is 1")
	} else {
		fmt.Println("x[0] is not 1")
	}

	switch x[1] { // switch statements
	case 1:
		fmt.Println("x[0] is 1")
	default:
		fmt.Println("x[0] is not 1")
	}

	for i := 0; i < len(x); i++ { fmt.Println(x[i]) } // C-style
	for i, v := range x { fmt.Println(i, v) }         // Range-based (index, value)

	m := map[string]int{"a": 1, "b": 2} // hash maps (aka dicts)
	m["c"] = 3

## Go has functions, structs and methods

Like C++ classes, but much simpler!

	type Person struct {
		Name string
		Age  int
	}
	
	func (p Person) SayHello() {
		fmt.Println("Hello, my name is", p.Name)
	}
	
	func SayHello(p Person) {
		fmt.Println("Hello, my name is", p.Name)
	}
	
	func main() {
		p := Person{Name: "John", Age: 20} // struct initialization
		p.SayHello() // Output: Hello, my name is John
		SayHello(p) // Output: Hello, my name is John
	}

## Go has interfaces

Interfaces define what methods we want from a type. It is a basic form of
polymorphism.

We can borrow our `Person` class earlier:

.play cmd/interfaces1/main.go /BEGIN OMIT/,/END OMIT/

## Go has interfaces

or be a `Cat`:

.play cmd/interfaces2/main.go /type Cat(.|\n)*/

## Go has type-assertions

.play cmd/interfaces3/main.go /func sayHelloWithEmojis(.|\n)*/

## Go has defer

`defer` marks a function to be called when the current function exits. It's
called similarly to a stack.

.play cmd/defer/main.go /func main(.|\n)*/

## Go has goroutines

Goroutines are like threads, but they're more lightweight. They're also a lot
easier in Go.

.play cmd/goros/main.go /func main(.|\n)*/

## Go has packages

In Go, each folder is a package, and all files in the same folder are
part of the same package.

```
module example.com/demo // go.mod, needed in each project like package.json
```

```
package thing           // thing/whatever.go
func F1() {}
```

```
package thing           // thing/whatever2.go
func F2() {}
func f3() {} // lowercase means private (aka "unexported")
```

```
package main            // main.go

import "example.com/demo/thing" // imports the ./thing folder (no relative imports!)

func main() {
	thing.F1()
	thing.F2()
	thing.f3() // error! c is unexported
}
```

## Go's dependency management is like Node.JS

Initialize a project by making a new directory and running `go mod init`:

	$ mkdir project
	$ cd project
	$ go mod init github.com/username/project # this creates a go.mod file

This is not on the Go Playground!

Once a Go "module" is pushed to a public repository, it can be imported by
anyone else. If a package is in the same module, it will directly use the module
without downloading it.

To import a package from a module, add an `import` statement to your code:

	//      v-----------repo----------v v-package-v
	import "github.com/username/project/packagename"

## Go CLI reference

Go's CLI is super simple.

To build the program:

```sh
$ go build
```

To run the program:

```sh
$ go run .
```

To run all packages' tests:

```sh
$ go test ./...
```

## Let's set up Go!

## Installing Go

	switch operatingSystem {
	case Ubuntu22_04, Ubuntu22_10: // or later or WSL2
		// You have Go 1.18 or later! Just install it using apt.
		sh(`sudo apt install golang-go`)
	case UbuntuOlder:
		// You'll need to use a PPA to get a newer version of Go.
		sh(`sudo add-apt-repository ppa:longsleep/golang-backports 
			sudo apt update
			sudo apt install golang-go`)
	case MacOS_Homebrew:
		// You can use Homebrew to install Go if you have it.
		sh(`brew install go`)
	case MacOS, Windows:
		// You can download Go from the official website. Install it like a regular
		// package. See go.dev/doc/install for more information.
		open("https://go.dev/dl/")
	default:
		// Just ask me! But also check the website.
		open("https://go.dev/dl/")
	}

## Visual Studio Code

Just install this extension! If prompted to install the language server, do so.

<div align="center" style="height: 85%">
	<img src="images/vscode.png" width="80%">
</div>

## Vim

Install `gopls`:

```sh
echo 'PATH="$PATH:$(go env GOPATH)/bin"' >> ~/.bashrc # or any shellrc
go install golang.org/x/tools/gopls@latest
```

Then add `gopls` to any of your LSP plugins (e.g. CoC, ALE, Neovim LSP, etc.)

If you have any issues, just ask me! I use Vim, BTW.

## Check that your environment works

Simply make sure that your autocompletion works:

<div align="center" style="height: 85%">
	<img src="images/completion.png" width="80%">
</div>

## Let's make a REST API!

## What we'll do

We'll pretend we're Jeff Bezos and make a REST API for our online bookstore.

Our bookstore will have:

- A REST API for getting, creating, updating and deleting books
- A SQLite database to store our books
- Unit tests for our API

## Cloning

Open the demo `bookstore` project:

	git clone https://github.com/diamondburned/acm-go-present
	cd acm-go-present/cmd/bookstore

## Project Structure

	.
	├── bookstore/      -- folder encompassing the bookstore
	│   ├── api/          -- REST API handlers
	│   ├── bookstore.go  -- data types and models
	│   └── db/           -- SQLite store implementation
	├── go.mod
	├── go.sum
	├── main.go         -- main server program
	└── README.md

## Terminal Time!

## Thank you for coming!

More resources:

- Go Tour ([go.dev/tour](https://go.dev/tour)), an interactive Go tutorial made
  by the Go team.
- Go Playground ([go.dev/tour](https://go.dev/tour), a place to try out short Go
  codes.
- Go Workshop ([goworkshop.libdb.so](https://goworkshop.libdb.so)): this slide
  deck.

.image images/gopher-group.png
