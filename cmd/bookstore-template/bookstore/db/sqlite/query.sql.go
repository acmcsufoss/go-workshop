// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlite

import (
	"context"
)

const addBook = `-- name: AddBook :exec
INSERT INTO books (isbn, title, author, price) VALUES (?, ?, ?, ?)
`

type AddBookParams struct {
	Isbn   string
	Title  string
	Author string
	Price  int64
}

func (q *Queries) AddBook(ctx context.Context, arg AddBookParams) error {
	_, err := q.db.ExecContext(ctx, addBook,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Price,
	)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE isbn = ?
`

func (q *Queries) DeleteBook(ctx context.Context, isbn string) error {
	_, err := q.db.ExecContext(ctx, deleteBook, isbn)
	return err
}

const getBook = `-- name: GetBook :one
SELECT isbn, title, author, price FROM books WHERE isbn = ?
`

func (q *Queries) GetBook(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, isbn)
	var i Book
	err := row.Scan(
		&i.Isbn,
		&i.Title,
		&i.Author,
		&i.Price,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT isbn, title, author, price FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.Isbn,
			&i.Title,
			&i.Author,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books SET title = ?, author = ?, price = ? WHERE isbn = ?
`

type UpdateBookParams struct {
	Title  string
	Author string
	Price  int64
	Isbn   string
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.Price,
		arg.Isbn,
	)
	return err
}
